Notes

# Todo list

## Important

• Link hasn’t two hitboxes, the collision matrix contains the movement vector (vx;vy)
   → That's why we need to test his direction
   → That's why the two hitboxes had close values
• WIP: Add `NPC`s
   → Create a class `Message` or `NPCMessage` which could contain actions,
     conditions, etc.
      ▸ Improve `MessageBox` to handle choices
   → Check the real hitbox of Link thanks to `NPC`s which don't have rounded
     corners
      ▸ Write a `MapCollisionHandler`
   → Fix remaining issues
      ▸ Fix the conflict between button A's action and `NPC`'s dialog
      ▸ Link can be displayed behind and in front of a `NPC` in the original game
         → FIXME: I think I'll need two sets of `SceneObjects`, the ones in front of the player, the others behind
      ▸ `NPC` animation should be stopped when his message is displayed
         → I think using `Sprite::pause` could be a good idea
• DONE: `Octorok` should drop collectables
   → FIXME: Drop after the end of the death animation
• Use `clang-format` and `clang-tidy` and write pre-commit hooks
• Implement projectiles for `Octoroks`
• Add `JarFactory` and `BlockFactory`
   ▸ A `Jar` is movable in all ways
   ▸ A `Block` can be moved once only, or not at all, and requires the way it can be moved
• Add power bracelet
   ▸ Pots and grass are liftable
   → Add state “Lifting” for player

## Improvements

• Compare `CubeLand` and `Zelda` code, find what has been improved in `CubeLand` and what could be improved in `Zelda`
• Try to reduce code of `GamePad::isKeyPressed`
• Improve code performance
• Improve `Collectable` drop movement and add shadow
• Improve sword positions
• Remove sword loading animation and replace it by palette switch
• Improve `OpenGL` code
   → Use model matrix instead of raw positions
      ▸ Base class `Transformable`?
   → Write a class `VertexArray`, and use it in `Image` and `Rectangle`
• Add more debug tools, like a `Logger` class/namespace
• Add more unit tests
• Check valgrind
• Check if GameClock is fully accurate
• Reduce compile time
   ▸ Forward declare stuff

# Refactoring issues

• Fix grass objects hitbox
• Fix player/button collision when using sword
   → Link shouldn’t move, the `Sprite` should (check the original game)
• `Sword` position when player is hurt at the same time he uses it is weird
   → Slow down game to see what actually happens
• `HurtMovement` can stop if player is stopped?
   ▸ Check the behaviour in the original game
   → Check `isMoving` flag
• The tile under link should be destroyed by his spin attack
• Find a better way to check if the player is facing a chest

# Other issues

• When `Octorok` goes out of the map it throws an exception
   → “Fatal error at ResourceHandler.hpp:43: Unable to find resource with name: 2-0-1”
   → Why the `ScrollingTransition` is triggered with an `Octorok`
• `Player` and `Octoroks` can be pushed out of the map during `HurtMovement`
   → Check in `PlayerFactory::mapCollisions`, if hurt so go to `ScrollingTransition`, else
     block him
• Octorok's `HurtMovement` speed too slow?
   → Check the original game, and adapt the speed
• Improve palette system
   → Look at `KubKraft` and improve `Shader` class
   → Move palette system into other files
• `Rupees` are added one by one to the counter in the original game
   ▪ There's also a sound effect
• Check sound effect channels in real game
   ▪ For example, is it possible to hear sword loading sound anymore when link releases spin attack?
   ▪ It's not possible to hear text ‘clicks’ during ‘tadaaaaaaa’ (new item)
   → Define channel in constructor (and ‘load’), so from `Sound.cpp`
• Fix `grassDestroy` animation
   → Find the *Oracle of* version
• `Player` can be teleported when hurt
   → Check if player is hurt before teleportation
• Find why collectables don't drop correctly on my eeePC
• DONE: Fix ‘moonwalk’ bug
   → `Up` and `Down` can't be pressed at the same time
   → `Left` and `Right` can't be pressed at the same time
   → Look at the original game and look at link's behaviour when it's the case

# Todo after engine is finished

• Improve game for `OpenGL ES` and try on Android
• Write a little game editor with `Qt` to add content if needed, it needs:
   ▪ A `Map` editor
   ▪ A `SceneObject` editor

> vim:ft=notes

